class Solution {
    public int shipWithinDays(int[] arr, int d) {
        int sum = 0;
        int mx = arr[0];
        
        // Calculate sum of array elements and find the maximum element
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        
        // Binary search between the maximum single weight and the sum of all weights
        int low = mx;
        int high = sum;
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            int sum2 = 0;
            int days = 1; // Start with one day
            
            for (int i = 0; i < arr.length; i++) {
                if (sum2 + arr[i] > mid) {
                    // If adding this item exceeds capacity, start a new day
                    days++;
                    sum2 = 0;
                }
                sum2 += arr[i];
            }
            
            if (days <= d) {
                high = mid; // Try for a smaller capacity
            } else {
                low = mid + 1; // Increase the capacity
            }
        }
        
        return low;
    }
}

